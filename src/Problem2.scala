/*
 * Problem 2:
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 *
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 *
 * Solution: 4613732
 *
 */
import scala.collection.mutable.ArrayBuffer


/*
 * Generates even fib numbers under maxFibVal. The problem gives the fib sequence
 * starting at the third postion (1,2,3,5...). Even fib numbers are then summed for
 * the solution
 */
object Problem2 {


    def main(args: Array[String]) {
        val maxFibVal:Int = 4000000

        var pos: Int = 1
        var fib: Long = 0
        var evenFibNums = ArrayBuffer[Long]()

        while (fib < maxFibVal) {
            if (fib % 2 == 0) evenFibNums += fib
            pos += 1
            fib = algebraicFibAt(pos)
        }
        println(evenFibNums.sum)
    }


    /*
     * Elegant, accurate, vastly superior, generally unknown algebraic O(1) fib solution.
     */
    def algebraicFibAt(n: Int): Long = {
        val phi: Double = 1.6180339887
        Math.round(Math.pow(phi, n) / Math.sqrt(5))
    }
}
